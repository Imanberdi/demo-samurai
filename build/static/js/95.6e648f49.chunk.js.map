{"version":3,"file":"static/js/95.6e648f49.chunk.js","mappings":"uNAaA,EAVmB,SAACA,GAClB,IAAMC,EAAO,YAAcD,EAAME,GAEjC,OACE,SAACC,EAAD,WACE,SAAC,KAAD,CAASC,GAAIH,EAAb,SAAoBD,EAAMK,UAO1BF,EAASG,EAAAA,GAAAA,IAAH,iECRZ,EAPgB,SAACN,GACf,OACE,0BACE,gBAAKE,GAAIF,EAAME,GAAf,SAAoBF,EAAMO,a,wCC0DhC,EAlDgB,SAACP,GACf,IAAMQ,GAAWC,EAAAA,EAAAA,MACXC,GAAQC,EAAAA,EAAAA,KAAY,SAACD,GAAD,OAAWA,EAAME,eACrCC,GAASF,EAAAA,EAAAA,KAAY,SAACD,GAAD,OAAWA,EAAMI,KAAKD,UAC7CE,EAAWL,EAAMK,SACjBC,EAAiBN,EAAMM,eACvBC,EAAUP,EAAMO,QAEpB,GAA0CC,EAAAA,EAAAA,MAAlCC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,aAAcC,EAAhC,EAAgCA,MAOhC,OAAKR,GAGH,UAACS,EAAD,YACE,SAACC,EAAD,UACGN,EAAQO,KAAI,SAACC,GAAD,OACX,SAAC,EAAD,CAAuBpB,KAAMoB,EAAEpB,KAAMH,GAAIuB,EAAEvB,IAA1BuB,EAAEvB,UAGvB,UAAC,EAAD,WACGa,EAASS,KAAI,SAACE,GAAD,OACZ,SAAC,EAAD,CACEC,MAAO3B,EAAM2B,MACbX,eAAgBA,EAEhBT,QAASmB,EAAEnB,QACXL,GAAIwB,EAAExB,IAFDwB,EAAExB,QAKX,0BACE,kBAAM0B,SAAUR,GAzBF,SAACS,GACrBrB,GAASsB,EAAAA,EAAAA,IAAYD,EAAKE,aAC1BV,OAuBM,WACE,uCACMF,EAAS,eADf,IAEEa,YAAY,yBAEd,0BACE,mBAAQC,KAAK,SAAb,gCA1BQ,SAAC,KAAD,CAAU7B,GAAI,YAqC9BkB,EAAmBhB,EAAAA,GAAAA,IAAH,8EAIhBiB,EAAcjB,EAAAA,GAAAA,IAAH,0CAIX4B,EAAW5B,EAAAA,GAAAA,IAAH","sources":["components/dialogs/DialogItem.jsx","components/dialogs/Messages.jsx","components/dialogs/Dialogs.jsx"],"sourcesContent":["import { NavLink } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nconst DialogItem = (props) => {\r\n  const path = \"/dialogs/\" + props.id;\r\n\r\n  return (\r\n    <Dialog>\r\n      <NavLink to={path}>{props.name}</NavLink>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default DialogItem;\r\n\r\nconst Dialog = styled.div`\r\n  & > a.active {\r\n    color: gold;\r\n  }\r\n`;\r\n","const Message = (props) => {\r\n  return (\r\n    <div>\r\n      <div id={props.id}>{props.message}</div>\r\n    </div>\r\n  );\r\n};\r\nexport default Message;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport DialogItem from \"./DialogItem\";\r\nimport Message from \"./Messages\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  sendMessage\r\n} from \"../../features/dialog/dialogSlice\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nconst Dialogs = (props) => {\r\n  const dispatch = useDispatch();\r\n  const state = useSelector((state) => state.dialogsPage);\r\n  const isAuth = useSelector((state) => state.auth.isAuth);\r\n  let messages = state.messages;\r\n  let newMessageBody = state.newMessageBody;\r\n  let dialogs = state.dialogs;\r\n\r\n  const { register, handleSubmit, reset } = useForm();\r\n\r\n  const addNewMessage = (data) => {\r\n    dispatch(sendMessage(data.newMessage));\r\n    reset()\r\n  };\r\n\r\n  if (!isAuth) return <Navigate to={\"/login\"} />;\r\n\r\n  return (\r\n    <DialogsContainer>\r\n      <DialogsItem>\r\n        {dialogs.map((d) => (\r\n          <DialogItem key={d.id} name={d.name} id={d.id} />\r\n        ))}\r\n      </DialogsItem>\r\n      <Messages>\r\n        {messages.map((m) => (\r\n          <Message\r\n            store={props.store}\r\n            newMessageBody={newMessageBody}\r\n            key={m.id}\r\n            message={m.message}\r\n            id={m.id}\r\n          />\r\n        ))}\r\n        <div>\r\n          <form onSubmit={handleSubmit(addNewMessage)}>\r\n            <textarea\r\n              {...register(\"newMessage\")}\r\n              placeholder=\"Enter your message\"\r\n            ></textarea>\r\n            <div>\r\n              <button type=\"submit\">Send</button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </Messages>\r\n    </DialogsContainer>\r\n  );\r\n};\r\n\r\nexport default Dialogs;\r\n\r\nconst DialogsContainer = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 2fr 10fr;\r\n`;\r\nconst DialogsItem = styled.div`\r\n  padding: 10px;\r\n`;\r\n\r\nconst Messages = styled.div`\r\n  padding: 10px;\r\n`;\r\n"],"names":["props","path","id","Dialog","to","name","styled","message","dispatch","useDispatch","state","useSelector","dialogsPage","isAuth","auth","messages","newMessageBody","dialogs","useForm","register","handleSubmit","reset","DialogsContainer","DialogsItem","map","d","m","store","onSubmit","data","sendMessage","newMessage","placeholder","type","Messages"],"sourceRoot":""}